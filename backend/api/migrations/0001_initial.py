# Generated by Django 5.2.6 on 2025-09-29 09:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_title', models.CharField(max_length=200)),
                ('event_description', models.TextField()),
                ('event_create_date', models.DateTimeField(auto_now_add=True)),
                ('start_date_register', models.DateTimeField()),
                ('end_date_register', models.DateTimeField()),
                ('max_attendee', models.PositiveIntegerField(blank=True, null=True)),
                ('event_address', models.CharField(blank=True, max_length=300, null=True)),
                ('event_image', models.ImageField(blank=True, null=True, upload_to='event_images/')),
                ('is_online', models.BooleanField(default=False)),
                ('event_meeting_link', models.URLField(blank=True, null=True)),
                ('event_category', models.CharField(blank=True, max_length=100, null=True)),
                ('tags', models.CharField(blank=True, max_length=200, null=True)),
                ('whitelisted_emails', models.TextField(blank=True, null=True)),
                ('blacklisted_emails', models.TextField(blank=True, null=True)),
                ('status_registration', models.CharField(default='OPEN', max_length=50)),
                ('event_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('event_phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('event_website_url', models.URLField(blank=True, null=True)),
                ('verification_status', models.CharField(blank=True, max_length=50, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, null=True)),
                ('event_updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instagram', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('tiktok', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AttendeeUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('role', models.CharField(blank=True, default='Attendee', max_length=50, null=True)),
                ('about_me', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('verification_status', models.CharField(blank=True, max_length=50, null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('is_superadmin', models.BooleanField(default=False)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_date', models.DateField()),
                ('start_time_event', models.TimeField()),
                ('end_time_event', models.TimeField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='api.event')),
            ],
        ),
        migrations.CreateModel(
            name='OrganizerUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization_category', models.CharField(max_length=100)),
                ('organization_logo', models.ImageField(blank=True, null=True, upload_to='org_logos/')),
                ('organization_description', models.TextField(blank=True, null=True)),
                ('verification_status', models.CharField(blank=True, max_length=50, null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organizer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.organizeruser'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('content_created_at', models.DateTimeField(auto_now_add=True)),
                ('content_updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.event')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.organizeruser')),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rates', models.PositiveIntegerField()),
                ('liked_datetime', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='api.event')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='api.organizeruser')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='social',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='api.social'),
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_title', models.CharField(max_length=100)),
                ('ticket_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_online', models.BooleanField(default=False)),
                ('meeting_link', models.URLField(blank=True, null=True)),
                ('qr_code', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(default='ACTIVE', max_length=50)),
                ('attendee_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='api.event')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='api.organizeruser')),
            ],
        ),
    ]
