"""
Django settings for uniplus project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

from pathlib import Path
import os

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key secret in production!
SECRET_KEY = 'django-insecure-b@cx7901so13k05^9@hu-*nr24vq6&c5nwaidc^!gs3&dq8&e$'

# Debug mode should only be True in development
DEBUG = True

# Allow connections from any host (use specific domains in production)
ALLOWED_HOSTS = ['*']


# ===========================
# Applications
# ===========================
INSTALLED_APPS = [
    'django.contrib.admin',       # Admin site
    'django.contrib.auth',        # Authentication framework
    'django.contrib.contenttypes',# Content type framework
    'django.contrib.sessions',    # Session framework
    'django.contrib.messages',    # Messaging framework
    'django.contrib.staticfiles', # Static file handling

    # Custom apps
    'api',                        # Your custom API app

    # Third-party apps
    'corsheaders',                # Handle Cross-Origin Resource Sharing (CORS)
    'ninja',                      # Django Ninja (API framework)
]

# ===========================
# Middleware
# ===========================
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',         # Must be first for CORS
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',     # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ===========================
# CORS & CSRF Settings
# ===========================
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",     # React / Next.js dev server
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True  # Allow cookies with CORS requests

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# Cookie settings (important for authentication with frontend)
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SECURE = False  # Change to True when using HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_DOMAIN = None   # Keep None for localhost dev

CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False     # Change to True when using HTTPS
CSRF_COOKIE_HTTPONLY = False   # Must be False so JS can read it (frontend needs CSRF token)
CSRF_COOKIE_DOMAIN = None

# Custom user model (from api.models)
AUTH_USER_MODEL = "api.AttendeeUser"


# ===========================
# URL & Templates
# ===========================
ROOT_URLCONF = 'uniplus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],   # Add custom template directories here
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',  # Injects request object into templates
                'django.contrib.auth.context_processors.auth', # Provides user authentication info
                'django.contrib.messages.context_processors.messages', # Provides messages framework
            ],
        },
    },
]

WSGI_APPLICATION = 'uniplus.wsgi.application'


# ===========================
# Database
# ===========================
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",            # PostgreSQL backend
        "NAME": os.environ.get("DB_NAME", "uniplus_db"),      # Database name
        "USER": os.environ.get("DB_USER", "postgres"),        # Username
        "PASSWORD": os.environ.get("DB_PASSWORD", "Password"),# Password
        "HOST": os.environ.get("DB_HOST", "db"),              # Host (Docker service = "db")
        "PORT": os.environ.get("DB_PORT", "5432"),            # PostgreSQL port
    }
}


# ===========================
# Password validation
# ===========================
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # Prevents passwords too similar to user data
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',           # Enforces minimum length
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',          # Blocks common passwords
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',         # Disallows numeric-only passwords
    },
]


# ===========================
# Internationalization
# ===========================
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# ===========================
# Static files
# ===========================
STATIC_URL = 'static/'  # URL prefix for static files

# ===========================
# Default primary key
# ===========================
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
